// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package node is a generated GoMock package.
package node

import (
	reflect "reflect"

	v1alpha1 "github.com/hwameistor/local-storage/pkg/apis/localstorage/v1alpha1"
	storage "github.com/hwameistor/local-storage/pkg/member/node/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockNodeManager is a mock of NodeManager interface.
type MockNodeManager struct {
	ctrl     *gomock.Controller
	recorder *MockNodeManagerMockRecorder
}

// MockNodeManagerMockRecorder is the mock recorder for MockNodeManager.
type MockNodeManagerMockRecorder struct {
	mock *MockNodeManager
}

// NewMockNodeManager creates a new mock instance.
func NewMockNodeManager(ctrl *gomock.Controller) *MockNodeManager {
	mock := &MockNodeManager{ctrl: ctrl}
	mock.recorder = &MockNodeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeManager) EXPECT() *MockNodeManagerMockRecorder {
	return m.recorder
}

// ReconcileVolumeReplica mocks base method.
func (m *MockNodeManager) ReconcileVolumeReplica(replica *v1alpha1.LocalVolumeReplica) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReconcileVolumeReplica", replica)
}

// ReconcileVolumeReplica indicates an expected call of ReconcileVolumeReplica.
func (mr *MockNodeManagerMockRecorder) ReconcileVolumeReplica(replica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVolumeReplica", reflect.TypeOf((*MockNodeManager)(nil).ReconcileVolumeReplica), replica)
}

// Run mocks base method.
func (m *MockNodeManager) Run(stopCh <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", stopCh)
}

// Run indicates an expected call of Run.
func (mr *MockNodeManagerMockRecorder) Run(stopCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockNodeManager)(nil).Run), stopCh)
}

// Storage mocks base method.
func (m *MockNodeManager) Storage() *storage.LocalManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Storage")
	ret0, _ := ret[0].(*storage.LocalManager)
	return ret0
}

// Storage indicates an expected call of Storage.
func (mr *MockNodeManagerMockRecorder) Storage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockNodeManager)(nil).Storage))
}

// TakeVolumeReplicaTaskAssignment mocks base method.
func (m *MockNodeManager) TakeVolumeReplicaTaskAssignment(vol *v1alpha1.LocalVolume) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TakeVolumeReplicaTaskAssignment", vol)
}

// TakeVolumeReplicaTaskAssignment indicates an expected call of TakeVolumeReplicaTaskAssignment.
func (mr *MockNodeManagerMockRecorder) TakeVolumeReplicaTaskAssignment(vol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeVolumeReplicaTaskAssignment", reflect.TypeOf((*MockNodeManager)(nil).TakeVolumeReplicaTaskAssignment), vol)
}
