// Code generated by MockGen. DO NOT EDIT.
// Source: pools.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	v1alpha1 "github.com/hwameistor/local-storage/pkg/apis/localstorage/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockLocalPoolManager is a mock of LocalPoolManager interface.
type MockLocalPoolManager struct {
	ctrl     *gomock.Controller
	recorder *MockLocalPoolManagerMockRecorder
}

// MockLocalPoolManagerMockRecorder is the mock recorder for MockLocalPoolManager.
type MockLocalPoolManagerMockRecorder struct {
	mock *MockLocalPoolManager
}

// NewMockLocalPoolManager creates a new mock instance.
func NewMockLocalPoolManager(ctrl *gomock.Controller) *MockLocalPoolManager {
	mock := &MockLocalPoolManager{ctrl: ctrl}
	mock.recorder = &MockLocalPoolManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalPoolManager) EXPECT() *MockLocalPoolManagerMockRecorder {
	return m.recorder
}

// ExtendPools mocks base method.
func (m *MockLocalPoolManager) ExtendPools(localDisks []*v1alpha1.LocalDisk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendPools", localDisks)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendPools indicates an expected call of ExtendPools.
func (mr *MockLocalPoolManagerMockRecorder) ExtendPools(localDisks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendPools", reflect.TypeOf((*MockLocalPoolManager)(nil).ExtendPools), localDisks)
}

// ExtendPoolsInfo mocks base method.
func (m *MockLocalPoolManager) ExtendPoolsInfo(localDisks map[string]*v1alpha1.LocalDisk) (map[string]*v1alpha1.LocalPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendPoolsInfo", localDisks)
	ret0, _ := ret[0].(map[string]*v1alpha1.LocalPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendPoolsInfo indicates an expected call of ExtendPoolsInfo.
func (mr *MockLocalPoolManagerMockRecorder) ExtendPoolsInfo(localDisks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendPoolsInfo", reflect.TypeOf((*MockLocalPoolManager)(nil).ExtendPoolsInfo), localDisks)
}

// GetReplicas mocks base method.
func (m *MockLocalPoolManager) GetReplicas() (map[string]*v1alpha1.LocalVolumeReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicas")
	ret0, _ := ret[0].(map[string]*v1alpha1.LocalVolumeReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicas indicates an expected call of GetReplicas.
func (mr *MockLocalPoolManagerMockRecorder) GetReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicas", reflect.TypeOf((*MockLocalPoolManager)(nil).GetReplicas))
}

// MockLocalPoolExecutor is a mock of LocalPoolExecutor interface.
type MockLocalPoolExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockLocalPoolExecutorMockRecorder
}

// MockLocalPoolExecutorMockRecorder is the mock recorder for MockLocalPoolExecutor.
type MockLocalPoolExecutorMockRecorder struct {
	mock *MockLocalPoolExecutor
}

// NewMockLocalPoolExecutor creates a new mock instance.
func NewMockLocalPoolExecutor(ctrl *gomock.Controller) *MockLocalPoolExecutor {
	mock := &MockLocalPoolExecutor{ctrl: ctrl}
	mock.recorder = &MockLocalPoolExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalPoolExecutor) EXPECT() *MockLocalPoolExecutorMockRecorder {
	return m.recorder
}

// ExtendPools mocks base method.
func (m *MockLocalPoolExecutor) ExtendPools(localDisks []*v1alpha1.LocalDisk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendPools", localDisks)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendPools indicates an expected call of ExtendPools.
func (mr *MockLocalPoolExecutorMockRecorder) ExtendPools(localDisks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendPools", reflect.TypeOf((*MockLocalPoolExecutor)(nil).ExtendPools), localDisks)
}

// ExtendPoolsInfo mocks base method.
func (m *MockLocalPoolExecutor) ExtendPoolsInfo(localDisks map[string]*v1alpha1.LocalDisk) (map[string]*v1alpha1.LocalPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendPoolsInfo", localDisks)
	ret0, _ := ret[0].(map[string]*v1alpha1.LocalPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendPoolsInfo indicates an expected call of ExtendPoolsInfo.
func (mr *MockLocalPoolExecutorMockRecorder) ExtendPoolsInfo(localDisks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendPoolsInfo", reflect.TypeOf((*MockLocalPoolExecutor)(nil).ExtendPoolsInfo), localDisks)
}

// GetReplicas mocks base method.
func (m *MockLocalPoolExecutor) GetReplicas() (map[string]*v1alpha1.LocalVolumeReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicas")
	ret0, _ := ret[0].(map[string]*v1alpha1.LocalVolumeReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicas indicates an expected call of GetReplicas.
func (mr *MockLocalPoolExecutorMockRecorder) GetReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicas", reflect.TypeOf((*MockLocalPoolExecutor)(nil).GetReplicas))
}
