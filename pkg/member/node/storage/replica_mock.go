// Code generated by MockGen. DO NOT EDIT.
// Source: replica.go

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	v1alpha1 "github.com/hwameistor/local-storage/pkg/apis/localstorage/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockLocalVolumeReplicaManager is a mock of LocalVolumeReplicaManager interface.
type MockLocalVolumeReplicaManager struct {
	ctrl     *gomock.Controller
	recorder *MockLocalVolumeReplicaManagerMockRecorder
}

// MockLocalVolumeReplicaManagerMockRecorder is the mock recorder for MockLocalVolumeReplicaManager.
type MockLocalVolumeReplicaManagerMockRecorder struct {
	mock *MockLocalVolumeReplicaManager
}

// NewMockLocalVolumeReplicaManager creates a new mock instance.
func NewMockLocalVolumeReplicaManager(ctrl *gomock.Controller) *MockLocalVolumeReplicaManager {
	mock := &MockLocalVolumeReplicaManager{ctrl: ctrl}
	mock.recorder = &MockLocalVolumeReplicaManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalVolumeReplicaManager) EXPECT() *MockLocalVolumeReplicaManagerMockRecorder {
	return m.recorder
}

// ConsistencyCheck mocks base method.
func (m *MockLocalVolumeReplicaManager) ConsistencyCheck() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConsistencyCheck")
}

// ConsistencyCheck indicates an expected call of ConsistencyCheck.
func (mr *MockLocalVolumeReplicaManagerMockRecorder) ConsistencyCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsistencyCheck", reflect.TypeOf((*MockLocalVolumeReplicaManager)(nil).ConsistencyCheck))
}

// CreateVolumeReplica mocks base method.
func (m *MockLocalVolumeReplicaManager) CreateVolumeReplica(replica *v1alpha1.LocalVolumeReplica) (*v1alpha1.LocalVolumeReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeReplica", replica)
	ret0, _ := ret[0].(*v1alpha1.LocalVolumeReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeReplica indicates an expected call of CreateVolumeReplica.
func (mr *MockLocalVolumeReplicaManagerMockRecorder) CreateVolumeReplica(replica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeReplica", reflect.TypeOf((*MockLocalVolumeReplicaManager)(nil).CreateVolumeReplica), replica)
}

// DeleteVolumeReplica mocks base method.
func (m *MockLocalVolumeReplicaManager) DeleteVolumeReplica(replica *v1alpha1.LocalVolumeReplica) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeReplica", replica)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeReplica indicates an expected call of DeleteVolumeReplica.
func (mr *MockLocalVolumeReplicaManagerMockRecorder) DeleteVolumeReplica(replica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeReplica", reflect.TypeOf((*MockLocalVolumeReplicaManager)(nil).DeleteVolumeReplica), replica)
}

// ExpandVolumeReplica mocks base method.
func (m *MockLocalVolumeReplicaManager) ExpandVolumeReplica(replica *v1alpha1.LocalVolumeReplica, newCapacityBytes int64) (*v1alpha1.LocalVolumeReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandVolumeReplica", replica, newCapacityBytes)
	ret0, _ := ret[0].(*v1alpha1.LocalVolumeReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandVolumeReplica indicates an expected call of ExpandVolumeReplica.
func (mr *MockLocalVolumeReplicaManagerMockRecorder) ExpandVolumeReplica(replica, newCapacityBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandVolumeReplica", reflect.TypeOf((*MockLocalVolumeReplicaManager)(nil).ExpandVolumeReplica), replica, newCapacityBytes)
}

// GetVolumeReplica mocks base method.
func (m *MockLocalVolumeReplicaManager) GetVolumeReplica(replica *v1alpha1.LocalVolumeReplica) (*v1alpha1.LocalVolumeReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeReplica", replica)
	ret0, _ := ret[0].(*v1alpha1.LocalVolumeReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeReplica indicates an expected call of GetVolumeReplica.
func (mr *MockLocalVolumeReplicaManagerMockRecorder) GetVolumeReplica(replica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeReplica", reflect.TypeOf((*MockLocalVolumeReplicaManager)(nil).GetVolumeReplica), replica)
}

// TestVolumeReplica mocks base method.
func (m *MockLocalVolumeReplicaManager) TestVolumeReplica(replica *v1alpha1.LocalVolumeReplica) (*v1alpha1.LocalVolumeReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestVolumeReplica", replica)
	ret0, _ := ret[0].(*v1alpha1.LocalVolumeReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestVolumeReplica indicates an expected call of TestVolumeReplica.
func (mr *MockLocalVolumeReplicaManagerMockRecorder) TestVolumeReplica(replica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestVolumeReplica", reflect.TypeOf((*MockLocalVolumeReplicaManager)(nil).TestVolumeReplica), replica)
}

// MockLocalVolumeExecutor is a mock of LocalVolumeExecutor interface.
type MockLocalVolumeExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockLocalVolumeExecutorMockRecorder
}

// MockLocalVolumeExecutorMockRecorder is the mock recorder for MockLocalVolumeExecutor.
type MockLocalVolumeExecutorMockRecorder struct {
	mock *MockLocalVolumeExecutor
}

// NewMockLocalVolumeExecutor creates a new mock instance.
func NewMockLocalVolumeExecutor(ctrl *gomock.Controller) *MockLocalVolumeExecutor {
	mock := &MockLocalVolumeExecutor{ctrl: ctrl}
	mock.recorder = &MockLocalVolumeExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocalVolumeExecutor) EXPECT() *MockLocalVolumeExecutorMockRecorder {
	return m.recorder
}

// ConsistencyCheck mocks base method.
func (m *MockLocalVolumeExecutor) ConsistencyCheck(crdReplicas map[string]*v1alpha1.LocalVolumeReplica) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConsistencyCheck", crdReplicas)
}

// ConsistencyCheck indicates an expected call of ConsistencyCheck.
func (mr *MockLocalVolumeExecutorMockRecorder) ConsistencyCheck(crdReplicas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsistencyCheck", reflect.TypeOf((*MockLocalVolumeExecutor)(nil).ConsistencyCheck), crdReplicas)
}

// CreateVolumeReplica mocks base method.
func (m *MockLocalVolumeExecutor) CreateVolumeReplica(replica *v1alpha1.LocalVolumeReplica) (*v1alpha1.LocalVolumeReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeReplica", replica)
	ret0, _ := ret[0].(*v1alpha1.LocalVolumeReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeReplica indicates an expected call of CreateVolumeReplica.
func (mr *MockLocalVolumeExecutorMockRecorder) CreateVolumeReplica(replica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeReplica", reflect.TypeOf((*MockLocalVolumeExecutor)(nil).CreateVolumeReplica), replica)
}

// DeleteVolumeReplica mocks base method.
func (m *MockLocalVolumeExecutor) DeleteVolumeReplica(replica *v1alpha1.LocalVolumeReplica) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeReplica", replica)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeReplica indicates an expected call of DeleteVolumeReplica.
func (mr *MockLocalVolumeExecutorMockRecorder) DeleteVolumeReplica(replica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeReplica", reflect.TypeOf((*MockLocalVolumeExecutor)(nil).DeleteVolumeReplica), replica)
}

// ExpandVolumeReplica mocks base method.
func (m *MockLocalVolumeExecutor) ExpandVolumeReplica(replica *v1alpha1.LocalVolumeReplica, newCapacityBytes int64) (*v1alpha1.LocalVolumeReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandVolumeReplica", replica, newCapacityBytes)
	ret0, _ := ret[0].(*v1alpha1.LocalVolumeReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandVolumeReplica indicates an expected call of ExpandVolumeReplica.
func (mr *MockLocalVolumeExecutorMockRecorder) ExpandVolumeReplica(replica, newCapacityBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandVolumeReplica", reflect.TypeOf((*MockLocalVolumeExecutor)(nil).ExpandVolumeReplica), replica, newCapacityBytes)
}

// GetReplicas mocks base method.
func (m *MockLocalVolumeExecutor) GetReplicas() (map[string]*v1alpha1.LocalVolumeReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicas")
	ret0, _ := ret[0].(map[string]*v1alpha1.LocalVolumeReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicas indicates an expected call of GetReplicas.
func (mr *MockLocalVolumeExecutorMockRecorder) GetReplicas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicas", reflect.TypeOf((*MockLocalVolumeExecutor)(nil).GetReplicas))
}

// TestVolumeReplica mocks base method.
func (m *MockLocalVolumeExecutor) TestVolumeReplica(replica *v1alpha1.LocalVolumeReplica) (*v1alpha1.LocalVolumeReplica, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestVolumeReplica", replica)
	ret0, _ := ret[0].(*v1alpha1.LocalVolumeReplica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestVolumeReplica indicates an expected call of TestVolumeReplica.
func (mr *MockLocalVolumeExecutorMockRecorder) TestVolumeReplica(replica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestVolumeReplica", reflect.TypeOf((*MockLocalVolumeExecutor)(nil).TestVolumeReplica), replica)
}
